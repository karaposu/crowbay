# coding: utf-8

"""
    Crowbay

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional, Union
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ListMyTasks200ResponseInner(BaseModel):
    """
    ListMyTasks200ResponseInner
    """ # noqa: E501
    task_id: Optional[StrictStr] = None
    desc: Optional[StrictStr] = None
    total_budget: Optional[Union[StrictFloat, StrictInt]] = None
    you_earn: Optional[Union[StrictFloat, StrictInt]] = None
    status: Optional[StrictStr] = None
    creation_date: Optional[datetime] = None
    partition_deadline: Optional[datetime] = None
    submission_deadline: Optional[datetime] = None
    category: Optional[StrictStr] = None
    bay_review: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = ["task_id", "desc", "total_budget", "you_earn", "status", "creation_date", "partition_deadline", "submission_deadline", "category", "bay_review"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('open', 'accepted', 'completed', 'disputed',):
            raise ValueError("must be one of enum values ('open', 'accepted', 'completed', 'disputed')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ListMyTasks200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ListMyTasks200ResponseInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "task_id": obj.get("task_id"),
            "desc": obj.get("desc"),
            "total_budget": obj.get("total_budget"),
            "you_earn": obj.get("you_earn"),
            "status": obj.get("status"),
            "creation_date": obj.get("creation_date"),
            "partition_deadline": obj.get("partition_deadline"),
            "submission_deadline": obj.get("submission_deadline"),
            "category": obj.get("category"),
            "bay_review": obj.get("bay_review")
        })
        return _obj


